(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['ngx-pipes'] = global['ngx-pipes'] || {}),global._angular_core));
}(this, (function (exports,_angular_core) { 'use strict';

var DiffPipe = (function () {
    function DiffPipe() {
    }
    DiffPipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!Array.isArray(input)) {
            return input;
        }
        return args.reduce(function (d, c) { return d.filter(function (e) { return !~c.indexOf(e); }); }, input);
    };
    return DiffPipe;
}());
DiffPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'diff' },] },
];
/** @nocollapse */
DiffPipe.ctorParameters = function () { return []; };

var InitialPipe = (function () {
    function InitialPipe() {
    }
    InitialPipe.prototype.transform = function (input, num) {
        if (num === void 0) { num = 0; }
        return Array.isArray(input)
            ? input.slice(0, input.length - num)
            : input;
    };
    return InitialPipe;
}());
InitialPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'initial' },] },
];
/** @nocollapse */
InitialPipe.ctorParameters = function () { return []; };

var FlattenPipe = (function () {
    function FlattenPipe() {
    }
    FlattenPipe.prototype.transform = function (input, shallow) {
        if (shallow === void 0) { shallow = false; }
        if (!Array.isArray(input)) {
            return input;
        }
        return shallow
            ? [].concat.apply([], input)
            : this.flatten(input);
    };
    FlattenPipe.prototype.flatten = function (array) {
        var _this = this;
        return array.reduce(function (arr, elm) {
            if (Array.isArray(elm)) {
                return arr.concat(_this.flatten(elm));
            }
            return arr.concat(elm);
        }, []);
    };
    return FlattenPipe;
}());
FlattenPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'flatten' },] },
];
/** @nocollapse */
FlattenPipe.ctorParameters = function () { return []; };

var IntersectionPipe = (function () {
    function IntersectionPipe() {
    }
    IntersectionPipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!Array.isArray(input)) {
            return input;
        }
        return args.reduce(function (n, c) { return n.filter(function (e) { return !!~c.indexOf(e); }); }, input);
    };
    return IntersectionPipe;
}());
IntersectionPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'intersection' },] },
];
/** @nocollapse */
IntersectionPipe.ctorParameters = function () { return []; };

function isUndefined(value) {
    return typeof value === 'undefined';
}
function isFunction(value) {
    return typeof value === 'function';
}
function isNumber(value) {
    return typeof value === 'number';
}
function isString(value) {
    return typeof value === 'string';
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function isObject(value) {
    return value !== null && typeof value === 'object';
}
function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
function applyPrecision(num, precision) {
    if (precision <= 0) {
        return Math.round(num);
    }
    var tho = Math.pow(10, precision);
    return Math.round(num * tho) / tho;
}
function extractDeepPropertyByMapKey(obj, map) {
    var keys = map.split('.');
    var key = keys.shift();
    return keys.reduce(function (prop, key) {
        return !isUndefined(prop) && !isUndefined(prop[key])
            ? prop[key]
            : undefined;
    }, obj[key || '']);
}
function getKeysTwoObjects(obj, other) {
    return Object.keys(obj).concat(Object.keys(other)).filter(function (key, index, array) { return array.indexOf(key) === index; });
}
function isDeepEqual(obj, other) {
    if (!isObject(obj) || !isObject(other)) {
        return obj === other;
    }
    return getKeysTwoObjects(obj, other).every(function (key) {
        if (!isObject(obj[key]) && !isObject(other[key])) {
            return obj[key] === other[key];
        }
        if (!isObject(obj[key]) || !isObject(other[key])) {
            return false;
        }
        return isDeepEqual(obj[key], other[key]);
    });
}

var ReversePipe = (function () {
    function ReversePipe() {
    }
    ReversePipe.prototype.transform = function (input) {
        if (isString(input)) {
            return input.split('').reverse().join('');
        }
        return Array.isArray(input)
            ? input.reverse()
            : input;
    };
    return ReversePipe;
}());
ReversePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'reverse' },] },
];
/** @nocollapse */
ReversePipe.ctorParameters = function () { return []; };

var TailPipe = (function () {
    function TailPipe() {
    }
    TailPipe.prototype.transform = function (input, num) {
        if (num === void 0) { num = 0; }
        return Array.isArray(input) ? input.slice(num) : input;
    };
    return TailPipe;
}());
TailPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'tail' },] },
];
/** @nocollapse */
TailPipe.ctorParameters = function () { return []; };

var TrurthifyPipe = (function () {
    function TrurthifyPipe() {
    }
    TrurthifyPipe.prototype.transform = function (input) {
        return Array.isArray(input)
            ? input.filter(function (e) { return !!e; })
            : input;
    };
    return TrurthifyPipe;
}());
TrurthifyPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'truthify' },] },
];
/** @nocollapse */
TrurthifyPipe.ctorParameters = function () { return []; };

var UnionPipe = (function () {
    function UnionPipe() {
    }
    UnionPipe.prototype.transform = function (input, args) {
        if (args === void 0) { args = []; }
        if (!Array.isArray(input) || !Array.isArray(args)) {
            return input;
        }
        return args.reduce(function (newArr, currArr) {
            return newArr.concat(currArr.reduce(function (noDupArr, curr) {
                return (!~noDupArr.indexOf(curr) && !~newArr.indexOf(curr))
                    ? noDupArr.concat([curr])
                    : noDupArr;
            }, []));
        }, input);
    };
    return UnionPipe;
}());
UnionPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'union' },] },
];
/** @nocollapse */
UnionPipe.ctorParameters = function () { return []; };

var UniquePipe = (function () {
    function UniquePipe() {
    }
    UniquePipe.prototype.transform = function (input, propertyName) {
        var uniques = [];
        return Array.isArray(input) ?
            isUndefined(propertyName) ?
                input.filter(function (e, i) { return input.indexOf(e) === i; }) :
                input.filter(function (e, i) {
                    var value = extractDeepPropertyByMapKey(e, propertyName);
                    value = isObject(value) ? JSON.stringify(value) : value;
                    if (isUndefined(value) || uniques[value]) {
                        return false;
                    }
                    uniques[value] = true;
                    return true;
                }) : input;
    };
    return UniquePipe;
}());
UniquePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'unique' },] },
];
/** @nocollapse */
UniquePipe.ctorParameters = function () { return []; };

var WithoutPipe = (function () {
    function WithoutPipe() {
    }
    WithoutPipe.prototype.transform = function (input, args) {
        if (args === void 0) { args = []; }
        return Array.isArray(input)
            ? input.filter(function (e) { return !~args.indexOf(e); })
            : input;
    };
    return WithoutPipe;
}());
WithoutPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'without' },] },
];
/** @nocollapse */
WithoutPipe.ctorParameters = function () { return []; };

var PluckPipe = (function () {
    function PluckPipe() {
    }
    PluckPipe.prototype.transform = function (input, map) {
        return Array.isArray(input)
            ? input.map(function (e) { return extractDeepPropertyByMapKey(e, map); })
            : input;
    };
    return PluckPipe;
}());
PluckPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'pluck', pure: false },] },
];
/** @nocollapse */
PluckPipe.ctorParameters = function () { return []; };

var ShufflePipe = (function () {
    function ShufflePipe() {
    }
    // Using a version of the Fisher-Yates shuffle algorithm
    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    ShufflePipe.prototype.transform = function (input) {
        if (!Array.isArray(input)) {
            return input;
        }
        var shuffled = input.slice();
        for (var i = 0, n = input.length - 1, l = n - 1; i < l; ++i) {
            var j = Math.floor(Math.random() * (n - i + 1)) + i;
            _a = [shuffled[j], shuffled[i]], shuffled[i] = _a[0], shuffled[j] = _a[1];
        }
        return shuffled;
        var _a;
    };
    return ShufflePipe;
}());
ShufflePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'shuffle' },] },
];
/** @nocollapse */
ShufflePipe.ctorParameters = function () { return []; };

var EveryPipe = (function () {
    function EveryPipe() {
    }
    EveryPipe.prototype.transform = function (input, predicate) {
        return Array.isArray(input) ? input.every(predicate) : false;
    };
    return EveryPipe;
}());
EveryPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'every' },] },
];
/** @nocollapse */
EveryPipe.ctorParameters = function () { return []; };

var SomePipe = (function () {
    function SomePipe() {
    }
    SomePipe.prototype.transform = function (input, predicate) {
        return Array.isArray(input) ? input.some(predicate) : input;
    };
    return SomePipe;
}());
SomePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'some' },] },
];
/** @nocollapse */
SomePipe.ctorParameters = function () { return []; };

var SamplePipe = (function () {
    function SamplePipe() {
    }
    SamplePipe.prototype.transform = function (input, len) {
        if (len === void 0) { len = 1; }
        if (!Array.isArray(input)) {
            return input;
        }
        var sample = [];
        for (var i = 0, tmp = input.slice(), l = len < tmp.length ? len : tmp.length; i < l; ++i) {
            sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));
        }
        return sample;
    };
    return SamplePipe;
}());
SamplePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'sample' },] },
];
/** @nocollapse */
SamplePipe.ctorParameters = function () { return []; };

var GroupByPipe = (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, discriminator, delimiter) {
        if (discriminator === void 0) { discriminator = []; }
        if (delimiter === void 0) { delimiter = '|'; }
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    };
    GroupByPipe.prototype.groupBy = function (list, discriminator, delimiter) {
        var _this = this;
        return list.reduce(function (acc, payload) {
            var key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key])
                ? acc[key].concat([payload])
                : [payload];
            return acc;
        }, {});
    };
    GroupByPipe.prototype.extractKeyByDiscriminator = function (discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return discriminator(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(function (k) { return extractDeepPropertyByMapKey(payload, k); }).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, discriminator);
    };
    return GroupByPipe;
}());
GroupByPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'groupBy', pure: false },] },
];
/** @nocollapse */
GroupByPipe.ctorParameters = function () { return []; };

var FilterByPipe = (function () {
    function FilterByPipe() {
    }
    FilterByPipe.prototype.transform = function (input, props, search, strict) {
        if (search === void 0) { search = ''; }
        if (strict === void 0) { strict = false; }
        if (!Array.isArray(input) || (!isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        var term = String(search).toLowerCase();
        return input.filter(function (obj) {
            return props.some(function (prop) {
                var value = extractDeepPropertyByMapKey(obj, prop), strValue = String(value).toLowerCase();
                if (isUndefined(value)) {
                    return false;
                }
                return strict
                    ? term === strValue
                    : !!~strValue.indexOf(term);
            });
        });
    };
    return FilterByPipe;
}());
FilterByPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'filterBy', pure: false },] },
];
/** @nocollapse */
FilterByPipe.ctorParameters = function () { return []; };

var OrderByPipe = (function () {
    function OrderByPipe() {
    }
    OrderByPipe.prototype.transform = function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        var out = input.slice();
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort(function (a, b) {
                for (var i = 0, l = config.length; i < l; ++i) {
                    var _a = OrderByPipe.extractFromConfig(config[i]), prop = _a[0], asc = _a[1];
                    var pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = OrderByPipe.extractFromConfig(config), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                switch (sign) {
                    case '+': return out.sort(OrderByPipe.simpleSort.bind(this));
                    case '-': return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    };
    OrderByPipe.simpleSort = function (a, b) {
        return isString(a) && isString(b)
            ? a.toLowerCase().localeCompare(b.toLowerCase())
            : a - b;
    };
    OrderByPipe.orderCompare = function (prop, asc, a, b) {
        var first = extractDeepPropertyByMapKey(a, prop), second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            var pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc
            ? first - second
            : second - first;
    };
    OrderByPipe.extractFromConfig = function (config) {
        var sign = config.substr(0, 1);
        var prop = config.replace(/^[-+]/, '');
        var asc = sign !== '-';
        return [prop, asc, sign];
    };
    return OrderByPipe;
}());
OrderByPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'orderBy', pure: false },] },
];
/** @nocollapse */
OrderByPipe.ctorParameters = function () { return []; };

var ARRAY_PIPES = [
    DiffPipe, FlattenPipe, InitialPipe, IntersectionPipe, ReversePipe, TailPipe,
    TrurthifyPipe, UnionPipe, UniquePipe, WithoutPipe, PluckPipe, ShufflePipe,
    EveryPipe, SomePipe, SamplePipe, GroupByPipe, FilterByPipe, OrderByPipe
];
var NgArrayPipesModule = (function () {
    function NgArrayPipesModule() {
    }
    return NgArrayPipesModule;
}());
NgArrayPipesModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                declarations: ARRAY_PIPES,
                imports: [],
                exports: ARRAY_PIPES
            },] },
];
/** @nocollapse */
NgArrayPipesModule.ctorParameters = function () { return []; };

var KeysPipe = (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj);
    };
    return KeysPipe;
}());
KeysPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'keys' },] },
];
/** @nocollapse */
KeysPipe.ctorParameters = function () { return []; };

var ValuesPipe = (function () {
    function ValuesPipe() {
    }
    ValuesPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj).map(function (k) { return obj[k]; });
    };
    return ValuesPipe;
}());
ValuesPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'values' },] },
];
/** @nocollapse */
ValuesPipe.ctorParameters = function () { return []; };

var PairsPipe = (function () {
    function PairsPipe() {
    }
    PairsPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj).map(function (k) { return [k, obj[k]]; });
    };
    return PairsPipe;
}());
PairsPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'pairs' },] },
];
/** @nocollapse */
PairsPipe.ctorParameters = function () { return []; };

var PickPipe = (function () {
    function PickPipe() {
    }
    PickPipe.prototype.transform = function (obj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return args.reduce(function (o, k) {
            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
            var _a;
        }, {});
    };
    return PickPipe;
}());
PickPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'pick' },] },
];
/** @nocollapse */
PickPipe.ctorParameters = function () { return []; };

var OmitPipe = (function () {
    function OmitPipe() {
    }
    OmitPipe.prototype.transform = function (obj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj)
            .filter(function (k) { return !~args.indexOf(k); })
            .reduce(function (o, k) {
            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
            var _a;
        }, {});
    };
    return OmitPipe;
}());
OmitPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'omit' },] },
];
/** @nocollapse */
OmitPipe.ctorParameters = function () { return []; };

var InvertPipe = (function () {
    function InvertPipe() {
    }
    InvertPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj)
            .reduce(function (o, k) {
            return Object.assign(o, (_a = {}, _a[obj[k]] = k, _a));
            var _a;
        }, {});
    };
    return InvertPipe;
}());
InvertPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'invert' },] },
];
/** @nocollapse */
InvertPipe.ctorParameters = function () { return []; };

var InvertByPipe = (function () {
    function InvertByPipe() {
    }
    InvertByPipe.prototype.transform = function (obj, cb) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj).reduce(function (o, k) {
            var key = cb ? cb(obj[k]) : obj[k];
            return Array.isArray(o[key])
                ? (o[key].push(k), o)
                : Object.assign(o, (_a = {}, _a[key] = [k], _a));
            var _a;
        }, {});
    };
    return InvertByPipe;
}());
InvertByPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'invertBy' },] },
];
/** @nocollapse */
InvertByPipe.ctorParameters = function () { return []; };

var DiffObjPipe = (function () {
    function DiffObjPipe() {
    }
    DiffObjPipe.prototype.transform = function (obj, original) {
        if (original === void 0) { original = {}; }
        if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {
            return {};
        }
        return getKeysTwoObjects(obj, original).reduce(function (diff, key) {
            return (!isDeepEqual(original[key], obj[key]) ? diff[key] = obj[key] : {}), diff;
        }, {});
    };
    return DiffObjPipe;
}());
DiffObjPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'diffObj' },] },
];
/** @nocollapse */
DiffObjPipe.ctorParameters = function () { return []; };

var OBJECT_PIPES = [
    KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe,
    OmitPipe, DiffObjPipe
];
var NgObjectPipesModule = (function () {
    function NgObjectPipesModule() {
    }
    return NgObjectPipesModule;
}());
NgObjectPipesModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                declarations: OBJECT_PIPES,
                imports: [],
                exports: OBJECT_PIPES
            },] },
];
/** @nocollapse */
NgObjectPipesModule.ctorParameters = function () { return []; };

var UcWordsPipe = (function () {
    function UcWordsPipe() {
    }
    UcWordsPipe.prototype.transform = function (text) {
        if (isString(text)) {
            return text.split(' ')
                .map(function (sub) { return sub.slice(0, 1).toUpperCase() + sub.slice(1); })
                .join(' ');
        }
        return text;
    };
    return UcWordsPipe;
}());
UcWordsPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'ucwords' },] },
];
/** @nocollapse */
UcWordsPipe.ctorParameters = function () { return []; };

var LeftTrimPipe = (function () {
    function LeftTrimPipe() {
    }
    LeftTrimPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(new RegExp("^[" + chars + "]+"), '')
            : text;
    };
    return LeftTrimPipe;
}());
LeftTrimPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'ltrim' },] },
];
/** @nocollapse */
LeftTrimPipe.ctorParameters = function () { return []; };

var RepeatPipe = (function () {
    function RepeatPipe() {
    }
    RepeatPipe.prototype.transform = function (str, n, separator) {
        if (n === void 0) { n = 1; }
        if (separator === void 0) { separator = ''; }
        if (n <= 0) {
            throw new RangeError();
        }
        return n == 1 ? str : this.repeat(str, n - 1, separator);
    };
    RepeatPipe.prototype.repeat = function (str, n, separator) {
        return isString(str)
            ? (n == 0 ? str : (str + separator + this.repeat(str, n - 1, separator)))
            : str;
    };
    return RepeatPipe;
}());
RepeatPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'repeat' },] },
];
/** @nocollapse */
RepeatPipe.ctorParameters = function () { return []; };

var RightTrimPipe = (function () {
    function RightTrimPipe() {
    }
    RightTrimPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(new RegExp("[" + chars + "]+$"), '')
            : text;
    };
    return RightTrimPipe;
}());
RightTrimPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'rtrim' },] },
];
/** @nocollapse */
RightTrimPipe.ctorParameters = function () { return []; };

var ScanPipe = (function () {
    function ScanPipe() {
    }
    ScanPipe.prototype.transform = function (text, args) {
        if (args === void 0) { args = []; }
        return isString(text)
            ? text.replace(/\{(\d+)}/g, function (match, index) { return !isUndefined(args[index]) ? args[index] : match; })
            : text;
    };
    return ScanPipe;
}());
ScanPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'scan' },] },
];
/** @nocollapse */
ScanPipe.ctorParameters = function () { return []; };

var ShortenPipe = (function () {
    function ShortenPipe() {
    }
    ShortenPipe.prototype.transform = function (text, length, suffix, wordBreak) {
        if (length === void 0) { length = 0; }
        if (suffix === void 0) { suffix = ''; }
        if (wordBreak === void 0) { wordBreak = true; }
        if (!isString(text)) {
            return text;
        }
        if (text.length > length) {
            if (wordBreak) {
                return text.slice(0, length) + suffix;
            }
            if (!!~text.indexOf(' ', length)) {
                return text.slice(0, text.indexOf(' ', length)) + suffix;
            }
        }
        return text;
    };
    return ShortenPipe;
}());
ShortenPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'shorten' },] },
];
/** @nocollapse */
ShortenPipe.ctorParameters = function () { return []; };

var StripTagsPipe = (function () {
    function StripTagsPipe() {
    }
    StripTagsPipe.prototype.transform = function (text) {
        var allowedTags = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            allowedTags[_i - 1] = arguments[_i];
        }
        return allowedTags.length > 0
            ? text.replace(new RegExp("<(?!/?(" + allowedTags.join('|') + ")s*/?)[^>]+>", 'g'), '')
            : text.replace(/<(?:.|\s)*?>/g, '');
    };
    return StripTagsPipe;
}());
StripTagsPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'stripTags' },] },
];
/** @nocollapse */
StripTagsPipe.ctorParameters = function () { return []; };

var TrimPipe = (function () {
    function TrimPipe() {
    }
    TrimPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text) ? text.replace(new RegExp("^[" + chars + "]+|[" + chars + "]+$", 'g'), '') : text;
    };
    return TrimPipe;
}());
TrimPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'trim' },] },
];
/** @nocollapse */
TrimPipe.ctorParameters = function () { return []; };

var UcFirstPipe = (function () {
    function UcFirstPipe() {
    }
    UcFirstPipe.prototype.transform = function (text) {
        return isString(text)
            ? (text.slice(0, 1).toUpperCase() + text.slice(1))
            : text;
    };
    return UcFirstPipe;
}());
UcFirstPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'ucfirst' },] },
];
/** @nocollapse */
UcFirstPipe.ctorParameters = function () { return []; };

var SlugifyPipe = (function () {
    function SlugifyPipe() {
    }
    SlugifyPipe.prototype.transform = function (str) {
        return isString(str)
            ? str.toLowerCase().trim()
                .replace(/[^\w\-]+/g, ' ')
                .replace(/\s+/g, '-')
            : str;
    };
    return SlugifyPipe;
}());
SlugifyPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'slugify' },] },
];
/** @nocollapse */
SlugifyPipe.ctorParameters = function () { return []; };

var CamelizePipe = (function () {
    function CamelizePipe() {
    }
    CamelizePipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        if (!isString(text)) {
            return text;
        }
        return text.toLowerCase()
            .split(/[-_\s]/g)
            .filter(function (v) { return !!v; }).map(function (word, key) {
            return !key ? word : (word.slice(0, 1).toUpperCase() + word.slice(1));
        }).join('');
    };
    return CamelizePipe;
}());
CamelizePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'camelize' },] },
];
/** @nocollapse */
CamelizePipe.ctorParameters = function () { return []; };

var LatinisePipe = (function () {
    function LatinisePipe() {
        // Source: http://semplicewebsites.com/removing-accents-javascript
        this.latinMap = { "Á": "A", "Ă": "A", "Ắ": "A", "Ặ": "A", "Ằ": "A", "Ẳ": "A", "Ẵ": "A", "Ǎ": "A", "Â": "A", "Ấ": "A", "Ậ": "A", "Ầ": "A", "Ẩ": "A", "Ẫ": "A", "Ä": "A", "Ǟ": "A", "Ȧ": "A", "Ǡ": "A", "Ạ": "A", "Ȁ": "A", "À": "A", "Ả": "A", "Ȃ": "A", "Ā": "A", "Ą": "A", "Å": "A", "Ǻ": "A", "Ḁ": "A", "Ⱥ": "A", "Ã": "A", "Ꜳ": "AA", "Æ": "AE", "Ǽ": "AE", "Ǣ": "AE", "Ꜵ": "AO", "Ꜷ": "AU", "Ꜹ": "AV", "Ꜻ": "AV", "Ꜽ": "AY", "Ḃ": "B", "Ḅ": "B", "Ɓ": "B", "Ḇ": "B", "Ƀ": "B", "Ƃ": "B", "Ć": "C", "Č": "C", "Ç": "C", "Ḉ": "C", "Ĉ": "C", "Ċ": "C", "Ƈ": "C", "Ȼ": "C", "Ď": "D", "Ḑ": "D", "Ḓ": "D", "Ḋ": "D", "Ḍ": "D", "Ɗ": "D", "Ḏ": "D", "ǲ": "D", "ǅ": "D", "Đ": "D", "Ƌ": "D", "Ǳ": "DZ", "Ǆ": "DZ", "É": "E", "Ĕ": "E", "Ě": "E", "Ȩ": "E", "Ḝ": "E", "Ê": "E", "Ế": "E", "Ệ": "E", "Ề": "E", "Ể": "E", "Ễ": "E", "Ḙ": "E", "Ë": "E", "Ė": "E", "Ẹ": "E", "Ȅ": "E", "È": "E", "Ẻ": "E", "Ȇ": "E", "Ē": "E", "Ḗ": "E", "Ḕ": "E", "Ę": "E", "Ɇ": "E", "Ẽ": "E", "Ḛ": "E", "Ꝫ": "ET", "Ḟ": "F", "Ƒ": "F", "Ǵ": "G", "Ğ": "G", "Ǧ": "G", "Ģ": "G", "Ĝ": "G", "Ġ": "G", "Ɠ": "G", "Ḡ": "G", "Ǥ": "G", "Ḫ": "H", "Ȟ": "H", "Ḩ": "H", "Ĥ": "H", "Ⱨ": "H", "Ḧ": "H", "Ḣ": "H", "Ḥ": "H", "Ħ": "H", "Í": "I", "Ĭ": "I", "Ǐ": "I", "Î": "I", "Ï": "I", "Ḯ": "I", "İ": "I", "Ị": "I", "Ȉ": "I", "Ì": "I", "Ỉ": "I", "Ȋ": "I", "Ī": "I", "Į": "I", "Ɨ": "I", "Ĩ": "I", "Ḭ": "I", "Ꝺ": "D", "Ꝼ": "F", "Ᵹ": "G", "Ꞃ": "R", "Ꞅ": "S", "Ꞇ": "T", "Ꝭ": "IS", "Ĵ": "J", "Ɉ": "J", "Ḱ": "K", "Ǩ": "K", "Ķ": "K", "Ⱪ": "K", "Ꝃ": "K", "Ḳ": "K", "Ƙ": "K", "Ḵ": "K", "Ꝁ": "K", "Ꝅ": "K", "Ĺ": "L", "Ƚ": "L", "Ľ": "L", "Ļ": "L", "Ḽ": "L", "Ḷ": "L", "Ḹ": "L", "Ⱡ": "L", "Ꝉ": "L", "Ḻ": "L", "Ŀ": "L", "Ɫ": "L", "ǈ": "L", "Ł": "L", "Ǉ": "LJ", "Ḿ": "M", "Ṁ": "M", "Ṃ": "M", "Ɱ": "M", "Ń": "N", "Ň": "N", "Ņ": "N", "Ṋ": "N", "Ṅ": "N", "Ṇ": "N", "Ǹ": "N", "Ɲ": "N", "Ṉ": "N", "Ƞ": "N", "ǋ": "N", "Ñ": "N", "Ǌ": "NJ", "Ó": "O", "Ŏ": "O", "Ǒ": "O", "Ô": "O", "Ố": "O", "Ộ": "O", "Ồ": "O", "Ổ": "O", "Ỗ": "O", "Ö": "O", "Ȫ": "O", "Ȯ": "O", "Ȱ": "O", "Ọ": "O", "Ő": "O", "Ȍ": "O", "Ò": "O", "Ỏ": "O", "Ơ": "O", "Ớ": "O", "Ợ": "O", "Ờ": "O", "Ở": "O", "Ỡ": "O", "Ȏ": "O", "Ꝋ": "O", "Ꝍ": "O", "Ō": "O", "Ṓ": "O", "Ṑ": "O", "Ɵ": "O", "Ǫ": "O", "Ǭ": "O", "Ø": "O", "Ǿ": "O", "Õ": "O", "Ṍ": "O", "Ṏ": "O", "Ȭ": "O", "Ƣ": "OI", "Ꝏ": "OO", "Ɛ": "E", "Ɔ": "O", "Ȣ": "OU", "Ṕ": "P", "Ṗ": "P", "Ꝓ": "P", "Ƥ": "P", "Ꝕ": "P", "Ᵽ": "P", "Ꝑ": "P", "Ꝙ": "Q", "Ꝗ": "Q", "Ŕ": "R", "Ř": "R", "Ŗ": "R", "Ṙ": "R", "Ṛ": "R", "Ṝ": "R", "Ȑ": "R", "Ȓ": "R", "Ṟ": "R", "Ɍ": "R", "Ɽ": "R", "Ꜿ": "C", "Ǝ": "E", "Ś": "S", "Ṥ": "S", "Š": "S", "Ṧ": "S", "Ş": "S", "Ŝ": "S", "Ș": "S", "Ṡ": "S", "Ṣ": "S", "Ṩ": "S", "ẞ": "SS", "Ť": "T", "Ţ": "T", "Ṱ": "T", "Ț": "T", "Ⱦ": "T", "Ṫ": "T", "Ṭ": "T", "Ƭ": "T", "Ṯ": "T", "Ʈ": "T", "Ŧ": "T", "Ɐ": "A", "Ꞁ": "L", "Ɯ": "M", "Ʌ": "V", "Ꜩ": "TZ", "Ú": "U", "Ŭ": "U", "Ǔ": "U", "Û": "U", "Ṷ": "U", "Ü": "U", "Ǘ": "U", "Ǚ": "U", "Ǜ": "U", "Ǖ": "U", "Ṳ": "U", "Ụ": "U", "Ű": "U", "Ȕ": "U", "Ù": "U", "Ủ": "U", "Ư": "U", "Ứ": "U", "Ự": "U", "Ừ": "U", "Ử": "U", "Ữ": "U", "Ȗ": "U", "Ū": "U", "Ṻ": "U", "Ų": "U", "Ů": "U", "Ũ": "U", "Ṹ": "U", "Ṵ": "U", "Ꝟ": "V", "Ṿ": "V", "Ʋ": "V", "Ṽ": "V", "Ꝡ": "VY", "Ẃ": "W", "Ŵ": "W", "Ẅ": "W", "Ẇ": "W", "Ẉ": "W", "Ẁ": "W", "Ⱳ": "W", "Ẍ": "X", "Ẋ": "X", "Ý": "Y", "Ŷ": "Y", "Ÿ": "Y", "Ẏ": "Y", "Ỵ": "Y", "Ỳ": "Y", "Ƴ": "Y", "Ỷ": "Y", "Ỿ": "Y", "Ȳ": "Y", "Ɏ": "Y", "Ỹ": "Y", "Ź": "Z", "Ž": "Z", "Ẑ": "Z", "Ⱬ": "Z", "Ż": "Z", "Ẓ": "Z", "Ȥ": "Z", "Ẕ": "Z", "Ƶ": "Z", "Ĳ": "IJ", "Œ": "OE", "ᴀ": "A", "ᴁ": "AE", "ʙ": "B", "ᴃ": "B", "ᴄ": "C", "ᴅ": "D", "ᴇ": "E", "ꜰ": "F", "ɢ": "G", "ʛ": "G", "ʜ": "H", "ɪ": "I", "ʁ": "R", "ᴊ": "J", "ᴋ": "K", "ʟ": "L", "ᴌ": "L", "ᴍ": "M", "ɴ": "N", "ᴏ": "O", "ɶ": "OE", "ᴐ": "O", "ᴕ": "OU", "ᴘ": "P", "ʀ": "R", "ᴎ": "N", "ᴙ": "R", "ꜱ": "S", "ᴛ": "T", "ⱻ": "E", "ᴚ": "R", "ᴜ": "U", "ᴠ": "V", "ᴡ": "W", "ʏ": "Y", "ᴢ": "Z", "á": "a", "ă": "a", "ắ": "a", "ặ": "a", "ằ": "a", "ẳ": "a", "ẵ": "a", "ǎ": "a", "â": "a", "ấ": "a", "ậ": "a", "ầ": "a", "ẩ": "a", "ẫ": "a", "ä": "a", "ǟ": "a", "ȧ": "a", "ǡ": "a", "ạ": "a", "ȁ": "a", "à": "a", "ả": "a", "ȃ": "a", "ā": "a", "ą": "a", "ᶏ": "a", "ẚ": "a", "å": "a", "ǻ": "a", "ḁ": "a", "ⱥ": "a", "ã": "a", "ꜳ": "aa", "æ": "ae", "ǽ": "ae", "ǣ": "ae", "ꜵ": "ao", "ꜷ": "au", "ꜹ": "av", "ꜻ": "av", "ꜽ": "ay", "ḃ": "b", "ḅ": "b", "ɓ": "b", "ḇ": "b", "ᵬ": "b", "ᶀ": "b", "ƀ": "b", "ƃ": "b", "ɵ": "o", "ć": "c", "č": "c", "ç": "c", "ḉ": "c", "ĉ": "c", "ɕ": "c", "ċ": "c", "ƈ": "c", "ȼ": "c", "ď": "d", "ḑ": "d", "ḓ": "d", "ȡ": "d", "ḋ": "d", "ḍ": "d", "ɗ": "d", "ᶑ": "d", "ḏ": "d", "ᵭ": "d", "ᶁ": "d", "đ": "d", "ɖ": "d", "ƌ": "d", "ı": "i", "ȷ": "j", "ɟ": "j", "ʄ": "j", "ǳ": "dz", "ǆ": "dz", "é": "e", "ĕ": "e", "ě": "e", "ȩ": "e", "ḝ": "e", "ê": "e", "ế": "e", "ệ": "e", "ề": "e", "ể": "e", "ễ": "e", "ḙ": "e", "ë": "e", "ė": "e", "ẹ": "e", "ȅ": "e", "è": "e", "ẻ": "e", "ȇ": "e", "ē": "e", "ḗ": "e", "ḕ": "e", "ⱸ": "e", "ę": "e", "ᶒ": "e", "ɇ": "e", "ẽ": "e", "ḛ": "e", "ꝫ": "et", "ḟ": "f", "ƒ": "f", "ᵮ": "f", "ᶂ": "f", "ǵ": "g", "ğ": "g", "ǧ": "g", "ģ": "g", "ĝ": "g", "ġ": "g", "ɠ": "g", "ḡ": "g", "ᶃ": "g", "ǥ": "g", "ḫ": "h", "ȟ": "h", "ḩ": "h", "ĥ": "h", "ⱨ": "h", "ḧ": "h", "ḣ": "h", "ḥ": "h", "ɦ": "h", "ẖ": "h", "ħ": "h", "ƕ": "hv", "í": "i", "ĭ": "i", "ǐ": "i", "î": "i", "ï": "i", "ḯ": "i", "ị": "i", "ȉ": "i", "ì": "i", "ỉ": "i", "ȋ": "i", "ī": "i", "į": "i", "ᶖ": "i", "ɨ": "i", "ĩ": "i", "ḭ": "i", "ꝺ": "d", "ꝼ": "f", "ᵹ": "g", "ꞃ": "r", "ꞅ": "s", "ꞇ": "t", "ꝭ": "is", "ǰ": "j", "ĵ": "j", "ʝ": "j", "ɉ": "j", "ḱ": "k", "ǩ": "k", "ķ": "k", "ⱪ": "k", "ꝃ": "k", "ḳ": "k", "ƙ": "k", "ḵ": "k", "ᶄ": "k", "ꝁ": "k", "ꝅ": "k", "ĺ": "l", "ƚ": "l", "ɬ": "l", "ľ": "l", "ļ": "l", "ḽ": "l", "ȴ": "l", "ḷ": "l", "ḹ": "l", "ⱡ": "l", "ꝉ": "l", "ḻ": "l", "ŀ": "l", "ɫ": "l", "ᶅ": "l", "ɭ": "l", "ł": "l", "ǉ": "lj", "ſ": "s", "ẜ": "s", "ẛ": "s", "ẝ": "s", "ḿ": "m", "ṁ": "m", "ṃ": "m", "ɱ": "m", "ᵯ": "m", "ᶆ": "m", "ń": "n", "ň": "n", "ņ": "n", "ṋ": "n", "ȵ": "n", "ṅ": "n", "ṇ": "n", "ǹ": "n", "ɲ": "n", "ṉ": "n", "ƞ": "n", "ᵰ": "n", "ᶇ": "n", "ɳ": "n", "ñ": "n", "ǌ": "nj", "ó": "o", "ŏ": "o", "ǒ": "o", "ô": "o", "ố": "o", "ộ": "o", "ồ": "o", "ổ": "o", "ỗ": "o", "ö": "o", "ȫ": "o", "ȯ": "o", "ȱ": "o", "ọ": "o", "ő": "o", "ȍ": "o", "ò": "o", "ỏ": "o", "ơ": "o", "ớ": "o", "ợ": "o", "ờ": "o", "ở": "o", "ỡ": "o", "ȏ": "o", "ꝋ": "o", "ꝍ": "o", "ⱺ": "o", "ō": "o", "ṓ": "o", "ṑ": "o", "ǫ": "o", "ǭ": "o", "ø": "o", "ǿ": "o", "õ": "o", "ṍ": "o", "ṏ": "o", "ȭ": "o", "ƣ": "oi", "ꝏ": "oo", "ɛ": "e", "ᶓ": "e", "ɔ": "o", "ᶗ": "o", "ȣ": "ou", "ṕ": "p", "ṗ": "p", "ꝓ": "p", "ƥ": "p", "ᵱ": "p", "ᶈ": "p", "ꝕ": "p", "ᵽ": "p", "ꝑ": "p", "ꝙ": "q", "ʠ": "q", "ɋ": "q", "ꝗ": "q", "ŕ": "r", "ř": "r", "ŗ": "r", "ṙ": "r", "ṛ": "r", "ṝ": "r", "ȑ": "r", "ɾ": "r", "ᵳ": "r", "ȓ": "r", "ṟ": "r", "ɼ": "r", "ᵲ": "r", "ᶉ": "r", "ɍ": "r", "ɽ": "r", "ↄ": "c", "ꜿ": "c", "ɘ": "e", "ɿ": "r", "ś": "s", "ṥ": "s", "š": "s", "ṧ": "s", "ş": "s", "ŝ": "s", "ș": "s", "ṡ": "s", "ṣ": "s", "ṩ": "s", "ʂ": "s", "ᵴ": "s", "ᶊ": "s", "ȿ": "s", "ɡ": "g", "ß": "ss", "ᴑ": "o", "ᴓ": "o", "ᴝ": "u", "ť": "t", "ţ": "t", "ṱ": "t", "ț": "t", "ȶ": "t", "ẗ": "t", "ⱦ": "t", "ṫ": "t", "ṭ": "t", "ƭ": "t", "ṯ": "t", "ᵵ": "t", "ƫ": "t", "ʈ": "t", "ŧ": "t", "ᵺ": "th", "ɐ": "a", "ᴂ": "ae", "ǝ": "e", "ᵷ": "g", "ɥ": "h", "ʮ": "h", "ʯ": "h", "ᴉ": "i", "ʞ": "k", "ꞁ": "l", "ɯ": "m", "ɰ": "m", "ᴔ": "oe", "ɹ": "r", "ɻ": "r", "ɺ": "r", "ⱹ": "r", "ʇ": "t", "ʌ": "v", "ʍ": "w", "ʎ": "y", "ꜩ": "tz", "ú": "u", "ŭ": "u", "ǔ": "u", "û": "u", "ṷ": "u", "ü": "u", "ǘ": "u", "ǚ": "u", "ǜ": "u", "ǖ": "u", "ṳ": "u", "ụ": "u", "ű": "u", "ȕ": "u", "ù": "u", "ủ": "u", "ư": "u", "ứ": "u", "ự": "u", "ừ": "u", "ử": "u", "ữ": "u", "ȗ": "u", "ū": "u", "ṻ": "u", "ų": "u", "ᶙ": "u", "ů": "u", "ũ": "u", "ṹ": "u", "ṵ": "u", "ᵫ": "ue", "ꝸ": "um", "ⱴ": "v", "ꝟ": "v", "ṿ": "v", "ʋ": "v", "ᶌ": "v", "ⱱ": "v", "ṽ": "v", "ꝡ": "vy", "ẃ": "w", "ŵ": "w", "ẅ": "w", "ẇ": "w", "ẉ": "w", "ẁ": "w", "ⱳ": "w", "ẘ": "w", "ẍ": "x", "ẋ": "x", "ᶍ": "x", "ý": "y", "ŷ": "y", "ÿ": "y", "ẏ": "y", "ỵ": "y", "ỳ": "y", "ƴ": "y", "ỷ": "y", "ỿ": "y", "ȳ": "y", "ẙ": "y", "ɏ": "y", "ỹ": "y", "ź": "z", "ž": "z", "ẑ": "z", "ʑ": "z", "ⱬ": "z", "ż": "z", "ẓ": "z", "ȥ": "z", "ẕ": "z", "ᵶ": "z", "ᶎ": "z", "ʐ": "z", "ƶ": "z", "ɀ": "z", "ﬀ": "ff", "ﬃ": "ffi", "ﬄ": "ffl", "ﬁ": "fi", "ﬂ": "fl", "ĳ": "ij", "œ": "oe", "ﬆ": "st", "ₐ": "a", "ₑ": "e", "ᵢ": "i", "ⱼ": "j", "ₒ": "o", "ᵣ": "r", "ᵤ": "u", "ᵥ": "v", "ₓ": "x" };
    }
    LatinisePipe.prototype.transform = function (text, chars) {
        var _this = this;
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(/[^A-Za-z0-9]/g, function (key) {
                return _this.latinMap[key] || key;
            }) : text;
    };
    return LatinisePipe;
}());
LatinisePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'latinise' },] },
];
/** @nocollapse */
LatinisePipe.ctorParameters = function () { return []; };

var LinesPipe = (function () {
    function LinesPipe() {
    }
    LinesPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(/\r\n/g, '\n').split('\n')
            : text;
    };
    return LinesPipe;
}());
LinesPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'lines' },] },
];
/** @nocollapse */
LinesPipe.ctorParameters = function () { return []; };

var UnderscorePipe = (function () {
    function UnderscorePipe() {
    }
    UnderscorePipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.trim()
                .replace(/\s+/g, '')
                .replace(/[A-Z]/g, function (c, k) {
                return k ? "_" + c.toLowerCase() : c.toLowerCase();
            })
            : text;
    };
    return UnderscorePipe;
}());
UnderscorePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'underscore' },] },
];
/** @nocollapse */
UnderscorePipe.ctorParameters = function () { return []; };

var MatchPipe = (function () {
    function MatchPipe() {
    }
    MatchPipe.prototype.transform = function (text, pattern, flags) {
        if (!isString(text)) {
            return text;
        }
        return text.match(new RegExp(pattern, flags));
    };
    return MatchPipe;
}());
MatchPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'match' },] },
];
/** @nocollapse */
MatchPipe.ctorParameters = function () { return []; };

var TestPipe = (function () {
    function TestPipe() {
    }
    TestPipe.prototype.transform = function (text, pattern, flags) {
        if (!isString(text)) {
            return text;
        }
        return (new RegExp(pattern, flags)).test(text);
    };
    return TestPipe;
}());
TestPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'test' },] },
];
/** @nocollapse */
TestPipe.ctorParameters = function () { return []; };

var LeftPadPipe = (function () {
    function LeftPadPipe() {
    }
    LeftPadPipe.prototype.transform = function (str, length, padCharacter) {
        if (padCharacter === void 0) { padCharacter = ' '; }
        if (!isString(str) || str.length >= length) {
            return str;
        }
        while (str.length < length) {
            str = padCharacter + str;
        }
        return str;
    };
    return LeftPadPipe;
}());
LeftPadPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'lpad' },] },
];
/** @nocollapse */
LeftPadPipe.ctorParameters = function () { return []; };

var RightPadPipe = (function () {
    function RightPadPipe() {
    }
    RightPadPipe.prototype.transform = function (str, length, padCharacter) {
        if (length === void 0) { length = 1; }
        if (padCharacter === void 0) { padCharacter = ' '; }
        if (!isString(str) || str.length >= length) {
            return str;
        }
        while (str.length < length) {
            str = str + padCharacter;
        }
        return str;
    };
    return RightPadPipe;
}());
RightPadPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'rpad' },] },
];
/** @nocollapse */
RightPadPipe.ctorParameters = function () { return []; };

var STRING_PIPES = [
    LeftTrimPipe, RepeatPipe, RightTrimPipe, ScanPipe, ShortenPipe,
    StripTagsPipe, TrimPipe, UcFirstPipe, UcWordsPipe, SlugifyPipe,
    CamelizePipe, LatinisePipe, LinesPipe, UnderscorePipe, MatchPipe,
    TestPipe, LeftPadPipe, RightPadPipe
];
var NgStringPipesModule = (function () {
    function NgStringPipesModule() {
    }
    return NgStringPipesModule;
}());
NgStringPipesModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                declarations: STRING_PIPES,
                imports: [],
                exports: STRING_PIPES
            },] },
];
/** @nocollapse */
NgStringPipesModule.ctorParameters = function () { return []; };

var MaxPipe = (function () {
    function MaxPipe() {
    }
    MaxPipe.prototype.transform = function (arr) {
        return Array.isArray(arr)
            ? Math.max.apply(Math, arr) : arr;
    };
    return MaxPipe;
}());
MaxPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'max' },] },
];
/** @nocollapse */
MaxPipe.ctorParameters = function () { return []; };

var MinPipe = (function () {
    function MinPipe() {
    }
    MinPipe.prototype.transform = function (arr) {
        return Array.isArray(arr)
            ? Math.min.apply(Math, arr) : arr;
    };
    return MinPipe;
}());
MinPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'min' },] },
];
/** @nocollapse */
MinPipe.ctorParameters = function () { return []; };

var PercentagePipe = (function () {
    function PercentagePipe() {
    }
    PercentagePipe.prototype.transform = function (num, total, floor) {
        if (total === void 0) { total = 100; }
        if (floor === void 0) { floor = false; }
        if (isNaN(num)) {
            return num;
        }
        var percent = num * 100 / total;
        return floor ? Math.floor(percent) : percent;
    };
    return PercentagePipe;
}());
PercentagePipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'percentage' },] },
];
/** @nocollapse */
PercentagePipe.ctorParameters = function () { return []; };

var SumPipe = (function () {
    function SumPipe() {
    }
    SumPipe.prototype.transform = function (arr) {
        return Array.isArray(arr)
            ? arr.reduce(function (sum, curr) { return sum + curr; }, 0)
            : arr;
    };
    return SumPipe;
}());
SumPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'sum' },] },
];
/** @nocollapse */
SumPipe.ctorParameters = function () { return []; };

var FloorPipe = (function () {
    function FloorPipe() {
    }
    FloorPipe.prototype.transform = function (num, precision) {
        if (precision === void 0) { precision = 0; }
        if (precision <= 0) {
            return Math.floor(num);
        }
        var tho = Math.pow(10, precision);
        return Math.floor(num * tho) / tho;
    };
    return FloorPipe;
}());
FloorPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'floor' },] },
];
/** @nocollapse */
FloorPipe.ctorParameters = function () { return []; };

var RoundPipe = (function () {
    function RoundPipe() {
    }
    RoundPipe.prototype.transform = function (num, precision) {
        if (precision === void 0) { precision = 0; }
        return applyPrecision(num, precision);
    };
    return RoundPipe;
}());
RoundPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'round' },] },
];
/** @nocollapse */
RoundPipe.ctorParameters = function () { return []; };

var SqrtPipe = (function () {
    function SqrtPipe() {
    }
    SqrtPipe.prototype.transform = function (num) {
        return !isNaN(num)
            ? Math.sqrt(num)
            : num;
    };
    return SqrtPipe;
}());
SqrtPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'sqrt' },] },
];
/** @nocollapse */
SqrtPipe.ctorParameters = function () { return []; };

var PowerPipe = (function () {
    function PowerPipe() {
    }
    PowerPipe.prototype.transform = function (num, power) {
        if (power === void 0) { power = 2; }
        return !isNaN(num)
            ? Math.pow(num, power)
            : num;
    };
    return PowerPipe;
}());
PowerPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'pow' },] },
];
/** @nocollapse */
PowerPipe.ctorParameters = function () { return []; };

var CeilPipe = (function () {
    function CeilPipe() {
    }
    CeilPipe.prototype.transform = function (num, precision) {
        if (precision === void 0) { precision = 0; }
        if (precision <= 0) {
            return Math.ceil(num);
        }
        var tho = Math.pow(10, precision);
        return Math.ceil(num * tho) / tho;
    };
    return CeilPipe;
}());
CeilPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'ceil' },] },
];
/** @nocollapse */
CeilPipe.ctorParameters = function () { return []; };

var DegreesPipe = (function () {
    function DegreesPipe() {
    }
    DegreesPipe.prototype.transform = function (radians) {
        if (!isNumberFinite(radians)) {
            return NaN;
        }
        return radians * 180 / Math.PI;
    };
    return DegreesPipe;
}());
DegreesPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'degrees' },] },
];
/** @nocollapse */
DegreesPipe.ctorParameters = function () { return []; };

var BytesPipe = (function () {
    function BytesPipe() {
        this.dictionary = [
            { max: 1e3, type: 'B' },
            { max: 1e6, type: 'KB' },
            { max: 1e9, type: 'MB' },
            { max: 1e12, type: 'GB' }
        ];
    }
    BytesPipe.prototype.transform = function (value, precision) {
        if (!isNumberFinite(value)) {
            return NaN;
        }
        var format = this.dictionary.find(function (d) { return value < d.max; }) || this.dictionary[this.dictionary.length - 1];
        var calc = value / (format.max / 1e3);
        var num = isUndefined(precision) ? calc : applyPrecision(calc, precision);
        return num + " " + format.type;
    };
    return BytesPipe;
}());
BytesPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'bytes' },] },
];
/** @nocollapse */
BytesPipe.ctorParameters = function () { return []; };

var RadiansPipe = (function () {
    function RadiansPipe() {
    }
    RadiansPipe.prototype.transform = function (degrees) {
        if (!isNumberFinite(degrees)) {
            return NaN;
        }
        return degrees * Math.PI / 180;
    };
    return RadiansPipe;
}());
RadiansPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'radians' },] },
];
/** @nocollapse */
RadiansPipe.ctorParameters = function () { return []; };

var MATH_PIPES = [
    MaxPipe, MinPipe, PercentagePipe, SumPipe, FloorPipe, RoundPipe, SqrtPipe, PowerPipe,
    CeilPipe, DegreesPipe, BytesPipe, RadiansPipe
];
var NgMathPipesModule = (function () {
    function NgMathPipesModule() {
    }
    return NgMathPipesModule;
}());
NgMathPipesModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                declarations: MATH_PIPES,
                imports: [],
                exports: MATH_PIPES
            },] },
];
/** @nocollapse */
NgMathPipesModule.ctorParameters = function () { return []; };

var IsDefinedPipe = (function () {
    function IsDefinedPipe() {
    }
    IsDefinedPipe.prototype.transform = function (input) {
        return !isUndefined(input);
    };
    return IsDefinedPipe;
}());
IsDefinedPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isDefined' },] },
];
/** @nocollapse */
IsDefinedPipe.ctorParameters = function () { return []; };

var IsNullPipe = (function () {
    function IsNullPipe() {
    }
    IsNullPipe.prototype.transform = function (input) {
        return input === null;
    };
    return IsNullPipe;
}());
IsNullPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isNull' },] },
];
/** @nocollapse */
IsNullPipe.ctorParameters = function () { return []; };

var IsUndefinedPipe = (function () {
    function IsUndefinedPipe() {
    }
    IsUndefinedPipe.prototype.transform = function (input) {
        return isUndefined(input);
    };
    return IsUndefinedPipe;
}());
IsUndefinedPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isUndefined' },] },
];
/** @nocollapse */
IsUndefinedPipe.ctorParameters = function () { return []; };

var IsStringPipe = (function () {
    function IsStringPipe() {
    }
    IsStringPipe.prototype.transform = function (input) {
        return isString(input);
    };
    return IsStringPipe;
}());
IsStringPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isString' },] },
];
/** @nocollapse */
IsStringPipe.ctorParameters = function () { return []; };

var IsFunctionPipe = (function () {
    function IsFunctionPipe() {
    }
    IsFunctionPipe.prototype.transform = function (input) {
        return isFunction(input);
    };
    return IsFunctionPipe;
}());
IsFunctionPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isFunction' },] },
];
/** @nocollapse */
IsFunctionPipe.ctorParameters = function () { return []; };

var IsNumberPipe = (function () {
    function IsNumberPipe() {
    }
    IsNumberPipe.prototype.transform = function (input) {
        return isNumber(input);
    };
    return IsNumberPipe;
}());
IsNumberPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isNumber' },] },
];
/** @nocollapse */
IsNumberPipe.ctorParameters = function () { return []; };

var IsArrayPipe = (function () {
    function IsArrayPipe() {
    }
    IsArrayPipe.prototype.transform = function (input) {
        return Array.isArray(input);
    };
    return IsArrayPipe;
}());
IsArrayPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isArray' },] },
];
/** @nocollapse */
IsArrayPipe.ctorParameters = function () { return []; };

var IsObjectPipe = (function () {
    function IsObjectPipe() {
    }
    IsObjectPipe.prototype.transform = function (input) {
        return isObject(input);
    };
    return IsObjectPipe;
}());
IsObjectPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isObject' },] },
];
/** @nocollapse */
IsObjectPipe.ctorParameters = function () { return []; };

var IsGreaterEqualThanPipe = (function () {
    function IsGreaterEqualThanPipe() {
    }
    IsGreaterEqualThanPipe.prototype.transform = function (input, other) {
        return input >= other;
    };
    return IsGreaterEqualThanPipe;
}());
IsGreaterEqualThanPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isGreaterEqualThan' },] },
];
/** @nocollapse */
IsGreaterEqualThanPipe.ctorParameters = function () { return []; };

var IsGreaterThanPipe = (function () {
    function IsGreaterThanPipe() {
    }
    IsGreaterThanPipe.prototype.transform = function (input, other) {
        return input > other;
    };
    return IsGreaterThanPipe;
}());
IsGreaterThanPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isGreaterThan' },] },
];
/** @nocollapse */
IsGreaterThanPipe.ctorParameters = function () { return []; };

var IsLessEqualThanPipe = (function () {
    function IsLessEqualThanPipe() {
    }
    IsLessEqualThanPipe.prototype.transform = function (input, other) {
        return input <= other;
    };
    return IsLessEqualThanPipe;
}());
IsLessEqualThanPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isLessEqualThan' },] },
];
/** @nocollapse */
IsLessEqualThanPipe.ctorParameters = function () { return []; };

var IsEqualToPipe = (function () {
    function IsEqualToPipe() {
    }
    IsEqualToPipe.prototype.transform = function (input, other) {
        return input == other;
    };
    return IsEqualToPipe;
}());
IsEqualToPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isEqualTo' },] },
];
/** @nocollapse */
IsEqualToPipe.ctorParameters = function () { return []; };

var IsNotEqualToPipe = (function () {
    function IsNotEqualToPipe() {
    }
    IsNotEqualToPipe.prototype.transform = function (input, other) {
        return input != other;
    };
    return IsNotEqualToPipe;
}());
IsNotEqualToPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isNotEqualTo' },] },
];
/** @nocollapse */
IsNotEqualToPipe.ctorParameters = function () { return []; };

var IsIdenticalToPipe = (function () {
    function IsIdenticalToPipe() {
    }
    IsIdenticalToPipe.prototype.transform = function (input, other) {
        return input === other;
    };
    return IsIdenticalToPipe;
}());
IsIdenticalToPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isIdenticalTo' },] },
];
/** @nocollapse */
IsIdenticalToPipe.ctorParameters = function () { return []; };

var IsNotIdenticalToPipe = (function () {
    function IsNotIdenticalToPipe() {
    }
    IsNotIdenticalToPipe.prototype.transform = function (input, other) {
        return input !== other;
    };
    return IsNotIdenticalToPipe;
}());
IsNotIdenticalToPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isNotIdenticalTo' },] },
];
/** @nocollapse */
IsNotIdenticalToPipe.ctorParameters = function () { return []; };

var IsLessThanPipe = (function () {
    function IsLessThanPipe() {
    }
    IsLessThanPipe.prototype.transform = function (input, other) {
        return input < other;
    };
    return IsLessThanPipe;
}());
IsLessThanPipe.decorators = [
    { type: _angular_core.Pipe, args: [{ name: 'isLessThan' },] },
];
/** @nocollapse */
IsLessThanPipe.ctorParameters = function () { return []; };

var BOOLEAN_PIPES = [
    IsDefinedPipe, IsNullPipe, IsUndefinedPipe, IsStringPipe, IsFunctionPipe, IsNumberPipe,
    IsArrayPipe, IsObjectPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsLessEqualThanPipe,
    IsLessEqualThanPipe, IsEqualToPipe, IsNotEqualToPipe, IsIdenticalToPipe, IsNotIdenticalToPipe,
    IsLessThanPipe
];
var NgBooleanPipesModule = (function () {
    function NgBooleanPipesModule() {
    }
    return NgBooleanPipesModule;
}());
NgBooleanPipesModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                declarations: BOOLEAN_PIPES,
                imports: [],
                exports: BOOLEAN_PIPES
            },] },
];
/** @nocollapse */
NgBooleanPipesModule.ctorParameters = function () { return []; };

var NgPipesModule = (function () {
    function NgPipesModule() {
    }
    return NgPipesModule;
}());
NgPipesModule.decorators = [
    { type: _angular_core.NgModule, args: [{
                exports: [NgArrayPipesModule, NgStringPipesModule, NgMathPipesModule, NgBooleanPipesModule, NgObjectPipesModule]
            },] },
];
/** @nocollapse */
NgPipesModule.ctorParameters = function () { return []; };

exports.NgPipesModule = NgPipesModule;
exports.NgArrayPipesModule = NgArrayPipesModule;
exports.DiffPipe = DiffPipe;
exports.InitialPipe = InitialPipe;
exports.FlattenPipe = FlattenPipe;
exports.IntersectionPipe = IntersectionPipe;
exports.ReversePipe = ReversePipe;
exports.TailPipe = TailPipe;
exports.TrurthifyPipe = TrurthifyPipe;
exports.UnionPipe = UnionPipe;
exports.UniquePipe = UniquePipe;
exports.WithoutPipe = WithoutPipe;
exports.PluckPipe = PluckPipe;
exports.ShufflePipe = ShufflePipe;
exports.EveryPipe = EveryPipe;
exports.SomePipe = SomePipe;
exports.SamplePipe = SamplePipe;
exports.GroupByPipe = GroupByPipe;
exports.FilterByPipe = FilterByPipe;
exports.OrderByPipe = OrderByPipe;
exports.NgObjectPipesModule = NgObjectPipesModule;
exports.KeysPipe = KeysPipe;
exports.ValuesPipe = ValuesPipe;
exports.PairsPipe = PairsPipe;
exports.PickPipe = PickPipe;
exports.OmitPipe = OmitPipe;
exports.InvertPipe = InvertPipe;
exports.InvertByPipe = InvertByPipe;
exports.DiffObjPipe = DiffObjPipe;
exports.STRING_PIPES = STRING_PIPES;
exports.NgStringPipesModule = NgStringPipesModule;
exports.UcWordsPipe = UcWordsPipe;
exports.LeftTrimPipe = LeftTrimPipe;
exports.RepeatPipe = RepeatPipe;
exports.RightTrimPipe = RightTrimPipe;
exports.ScanPipe = ScanPipe;
exports.ShortenPipe = ShortenPipe;
exports.StripTagsPipe = StripTagsPipe;
exports.TrimPipe = TrimPipe;
exports.UcFirstPipe = UcFirstPipe;
exports.SlugifyPipe = SlugifyPipe;
exports.CamelizePipe = CamelizePipe;
exports.LatinisePipe = LatinisePipe;
exports.LinesPipe = LinesPipe;
exports.UnderscorePipe = UnderscorePipe;
exports.MatchPipe = MatchPipe;
exports.TestPipe = TestPipe;
exports.LeftPadPipe = LeftPadPipe;
exports.RightPadPipe = RightPadPipe;
exports.MATH_PIPES = MATH_PIPES;
exports.NgMathPipesModule = NgMathPipesModule;
exports.MaxPipe = MaxPipe;
exports.MinPipe = MinPipe;
exports.PercentagePipe = PercentagePipe;
exports.SumPipe = SumPipe;
exports.FloorPipe = FloorPipe;
exports.RoundPipe = RoundPipe;
exports.SqrtPipe = SqrtPipe;
exports.PowerPipe = PowerPipe;
exports.CeilPipe = CeilPipe;
exports.DegreesPipe = DegreesPipe;
exports.BytesPipe = BytesPipe;
exports.BOOLEAN_PIPES = BOOLEAN_PIPES;
exports.NgBooleanPipesModule = NgBooleanPipesModule;
exports.IsDefinedPipe = IsDefinedPipe;
exports.IsNullPipe = IsNullPipe;
exports.IsUndefinedPipe = IsUndefinedPipe;
exports.IsStringPipe = IsStringPipe;
exports.IsFunctionPipe = IsFunctionPipe;
exports.IsNumberPipe = IsNumberPipe;
exports.IsArrayPipe = IsArrayPipe;
exports.IsObjectPipe = IsObjectPipe;
exports.IsGreaterEqualThanPipe = IsGreaterEqualThanPipe;
exports.IsGreaterThanPipe = IsGreaterThanPipe;
exports.IsLessEqualThanPipe = IsLessEqualThanPipe;
exports.IsEqualToPipe = IsEqualToPipe;
exports.IsNotEqualToPipe = IsNotEqualToPipe;
exports.IsIdenticalToPipe = IsIdenticalToPipe;
exports.IsNotIdenticalToPipe = IsNotIdenticalToPipe;
exports.IsLessThanPipe = IsLessThanPipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
