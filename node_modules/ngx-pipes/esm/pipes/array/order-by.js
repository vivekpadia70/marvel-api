import { Pipe } from '@angular/core';
import { isString, extractDeepPropertyByMapKey, isUndefined } from '../helpers/helpers';
var OrderByPipe = (function () {
    function OrderByPipe() {
    }
    OrderByPipe.prototype.transform = function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        var out = input.slice();
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort(function (a, b) {
                for (var i = 0, l = config.length; i < l; ++i) {
                    var _a = OrderByPipe.extractFromConfig(config[i]), prop = _a[0], asc = _a[1];
                    var pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = OrderByPipe.extractFromConfig(config), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                switch (sign) {
                    case '+': return out.sort(OrderByPipe.simpleSort.bind(this));
                    case '-': return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    };
    OrderByPipe.simpleSort = function (a, b) {
        return isString(a) && isString(b)
            ? a.toLowerCase().localeCompare(b.toLowerCase())
            : a - b;
    };
    OrderByPipe.orderCompare = function (prop, asc, a, b) {
        var first = extractDeepPropertyByMapKey(a, prop), second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            var pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc
            ? first - second
            : second - first;
    };
    OrderByPipe.extractFromConfig = function (config) {
        var sign = config.substr(0, 1);
        var prop = config.replace(/^[-+]/, '');
        var asc = sign !== '-';
        return [prop, asc, sign];
    };
    return OrderByPipe;
}());
export { OrderByPipe };
OrderByPipe.decorators = [
    { type: Pipe, args: [{ name: 'orderBy', pure: false },] },
];
/** @nocollapse */
OrderByPipe.ctorParameters = function () { return []; };
//# sourceMappingURL=order-by.js.map